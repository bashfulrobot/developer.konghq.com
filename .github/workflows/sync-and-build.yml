name: Sync Fork and Build Docker Image

on:
  schedule:
    # Nightly at 10 PM PST (6 AM UTC)  
    - cron: '0 6 * * *'
  workflow_dispatch: # Allow manual triggering
  push:
    branches: [ main ]
    paths-ignore:
      - '.github/workflows/**'
      - '.github/**'
      - 'README.md'
      - '*.md'
  # Trigger only on content changes, not infrastructure/workflow changes

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/kong-docs

jobs:
  sync-upstream:
    runs-on: ubuntu-latest
    outputs:
      has-changes: ${{ steps.sync.outputs.has-changes }}
    
    steps:
      - name: Checkout fork
        uses: actions/checkout@d632683dd7b4114ad314bca15554477dd762a938 # v4.2.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Add upstream remote
        run: |
          git remote add upstream https://github.com/Kong/developer.konghq.com.git
          git fetch upstream

      - name: Sync with upstream
        id: sync
        run: |
          # Get current commit hash
          BEFORE_SYNC=$(git rev-parse HEAD)
          
          # Merge upstream changes
          git merge upstream/main --no-edit || {
            echo "Merge conflict detected. Manual intervention required."
            exit 1
          }
          
          # Check if there were any changes
          AFTER_SYNC=$(git rev-parse HEAD)
          
          if [ "$BEFORE_SYNC" != "$AFTER_SYNC" ]; then
            echo "has-changes=true" >> $GITHUB_OUTPUT
            echo "Changes detected from upstream"
            
            # Push the changes
            git push origin main
          else
            echo "has-changes=false" >> $GITHUB_OUTPUT
            echo "No changes from upstream"
          fi

  check-image:
    runs-on: ubuntu-latest
    outputs:
      image-exists: ${{ steps.check.outputs.exists }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@d632683dd7b4114ad314bca15554477dd762a938 # v4.2.0

      - name: Log in to Container Registry
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate image tag
        id: meta
        uses: docker/metadata-action@8e5442c4ef9f78752691e2d8f8d19755c6f78e81 # v5.5.1
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,prefix={{branch}}-

      - name: Check if image exists
        id: check
        run: |
          if docker manifest inspect ${{ steps.meta.outputs.tags }} >/dev/null 2>&1; then
            echo "Image ${{ steps.meta.outputs.tags }} exists."
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "Image ${{ steps.meta.outputs.tags }} does not exist."
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

  build-and-publish:
    needs: [sync-upstream, check-image]
    if: needs.check-image.outputs.image-exists == 'false'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@d632683dd7b4114ad314bca15554477dd762a938 # v4.2.0
        with:
          # If we just synced, we need to pull the latest changes
          ref: main

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@c47758b77c9736f4b2ef4073d4d51994fabfe349 # v3.7.1

      - name: Log in to Container Registry
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@8e5442c4ef9f78752691e2d8f8d19755c6f78e81 # v5.5.1
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value={{date 'YYYY-MM-DD'}}

      - name: Build and push Docker image
        uses: docker/build-push-action@4f58ea79222b3b9dc2c8bbdd6debcef730109a75 # v6.9.0
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Generate summary
        run: |
          echo "## ðŸš€ Docker Image Published" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Registry:** `${{ env.REGISTRY }}`" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** `${{ env.IMAGE_NAME }}`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Tags:" >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Usage:" >> $GITHUB_STEP_SUMMARY
          echo "```bash" >> $GITHUB_STEP_SUMMARY
          echo "docker run -p 8080:80 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY

  cleanup:
    needs: [sync-upstream, build-and-publish]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Delete old container images
        uses: actions/delete-package-versions@e5bc658cc4c965c472efe991f8beea3981499c55 # v5.0.0
        with:
          package-name: kong-docs
          package-type: container
          min-versions-to-keep: 10
          delete-only-untagged-versions: true
        continue-on-error: true
