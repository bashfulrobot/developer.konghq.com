# Base image for Kong Developer Documentation builds
# Contains all dependencies pre-installed for faster builds
# Built monthly or when dependencies change

FROM ubuntu:24.04

# Set environment variables to avoid interactive prompts
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=UTC

# Create version label for tracking
LABEL org.opencontainers.image.title="Kong Docs Base Image"
LABEL org.opencontainers.image.description="Pre-built base image with all dependencies for Kong Developer Documentation"
LABEL org.opencontainers.image.source="https://github.com/bashfulrobot/developer.konghq.com"

# Update and install base dependencies
RUN apt-get update && apt-get install -y \
    software-properties-common \
    curl \
    wget \
    gnupg \
    lsb-release \
    ca-certificates \
    apt-transport-https \
    && rm -rf /var/lib/apt/lists/*

# Configure apt for faster, minimal installs
RUN echo 'Acquire::Retries "3";' > /etc/apt/apt.conf.d/80-retries && \
    echo 'APT::Install-Suggests "false";' > /etc/apt/apt.conf.d/99-no-suggests && \
    echo 'APT::Install-Recommends "false";' > /etc/apt/apt.conf.d/99-no-recommends

# Install Node.js from NodeSource (includes npm)
RUN curl -fsSL https://deb.nodesource.com/setup_20.x | bash - && \
    apt-get update && apt-get install -y nodejs

# Install other dependencies (excluding npm since NodeSource nodejs includes it)
RUN apt-get update && apt-get install -y \
    ruby-full \
    ruby-dev \
    build-essential \
    git \
    python3 \
    python3-pip \
    python3-dev \
    libffi-dev \
    libssl-dev \
    zlib1g-dev \
    libsqlite3-dev \
    sqlite3 \
    pkg-config \
    && rm -rf /var/lib/apt/lists/*

# Verify npm is available and upgrade it to latest for better lockfile compatibility
RUN npm --version && npm install -g npm@latest && npm --version

# Install global npm tools that are commonly used
RUN npm install -g netlify-cli@16.5.1

# Install bundler and configure for optimal performance
RUN gem install bundler && \
    bundle config set --global jobs $(nproc) && \
    bundle config set --global retry 3 && \
    bundle config set --global deployment 'false'

# Pre-create common directories and set permissions
RUN mkdir -p /app && \
    chmod 755 /app

# Configure git defaults (useful for any git operations)
RUN git config --global user.email "docker@example.com" && \
    git config --global user.name "Docker Build" && \
    git config --global init.defaultBranch main

# Pre-install common dependencies to speed up daily builds
# Copy dependency files to pre-install packages
COPY package.json package-lock.json ./
COPY Gemfile Gemfile.lock ./
COPY .ruby-version ./

# Pre-install Ruby dependencies
RUN bundle config set --local path 'vendor/bundle' && \
    bundle install --without development test

# Note: Skipping Node dependency pre-installation due to npm tracker issues
# Will install in main build instead with better error handling
# This still provides significant speedup for Ruby dependencies

# Create backup copies of dependency files for tracking in main build
RUN cp package.json package.json.bak && \
    cp package-lock.json package-lock.json.bak && \
    cp Gemfile Gemfile.bak && \
    cp Gemfile.lock Gemfile.lock.bak

# Pre-install frontmatter validator dependencies
RUN mkdir -p tools/frontmatter-validator
COPY tools/frontmatter-validator/package.json tools/frontmatter-validator/package-lock.json tools/frontmatter-validator/
RUN cd tools/frontmatter-validator && npm ci

# Initialize git submodules structure (will be updated in main image)
RUN git init && \
    git config --global --add safe.directory /app

# Verify all installations and show versions
RUN echo "=== Base Image Software Versions ===" && \
    echo "Ubuntu: $(lsb_release -rs)" && \
    echo "Ruby: $(ruby --version)" && \
    echo "Node.js: $(node --version)" && \
    echo "npm: $(npm --version)" && \
    echo "Bundler: $(bundle --version)" && \
    echo "Git: $(git --version)" && \
    echo "Python: $(python3 --version)" && \
    echo "Ruby gems installed: $(bundle list | wc -l) gems" && \
    echo "Frontmatter validator: $(cd tools/frontmatter-validator && npm list --depth=0 | grep -c '@' || echo 'installed')" && \
    echo "====================================="

# Set working directory
WORKDIR /app

# Add metadata
LABEL org.opencontainers.image.created="$(date -u +'%Y-%m-%dT%H:%M:%SZ')"
LABEL version="1.0.0"