# Kong Developer Documentation - Docker Tasks
# Run with: just <command>

# Default recipe - show available commands
default:
    @just --list

# Build and run with docker-compose (recommended)
up:
    docker-compose up

# Build and run in background
up-detached:
    docker-compose up -d

# Stop docker-compose services
down:
    docker-compose down

# Build the Docker image locally
build:
    docker build -t kong-docs-offline .

# Build without cache (clean build)
build-clean:
    docker build -t kong-docs-offline . --no-cache

# Run the locally built image
run:
    docker run -d -p 8080:80 --name kong-docs kong-docs-offline

# Stop and remove the container
stop:
    docker stop kong-docs || true
    docker rm kong-docs || true

# Pull and run the latest pre-built image
pull-and-run:
    docker pull ghcr.io/bashfulrobot/kong-docs:latest
    docker run -d -p 8080:80 --name kong-docs-prebuilt ghcr.io/bashfulrobot/kong-docs:latest

# Stop and remove the pre-built container
stop-prebuilt:
    docker stop kong-docs-prebuilt || true
    docker rm kong-docs-prebuilt || true

# View container logs
logs:
    docker logs kong-docs

# View pre-built container logs
logs-prebuilt:
    docker logs kong-docs-prebuilt

# Check container health
health:
    curl -f http://localhost:8080/health || echo "Health check failed"

# Open documentation in browser
open:
    open http://localhost:8080 || xdg-open http://localhost:8080 || echo "Visit http://localhost:8080"

# Show running containers
ps:
    docker ps --filter "name=kong-docs"

# Clean up all Kong docs containers and images
clean:
    docker stop kong-docs kong-docs-prebuilt || true
    docker rm kong-docs kong-docs-prebuilt || true
    docker rmi kong-docs-offline || true
    docker-compose down --rmi local || true

# Show disk usage of Docker images
du:
    docker images --filter "reference=*kong*" --format "table {{{{.Repository}}}}\t{{{{.Tag}}}}\t{{{{.Size}}}}"

# Follow logs in real-time
tail:
    docker logs -f kong-docs

# Follow pre-built logs in real-time
tail-prebuilt:
    docker logs -f kong-docs-prebuilt

# Restart the docker-compose services
restart:
    docker-compose restart

# Pull latest changes and rebuild (for development)
dev-update:
    git pull
    docker-compose down
    docker-compose build --no-cache
    docker-compose up -d

# Run with custom port
run-port PORT:
    docker run -d -p {{PORT}}:80 --name kong-docs-{{PORT}} kong-docs-offline

# Quick development cycle: build and run
dev: build run open

# Sync with upstream Kong repository (preserves local changes)
sync-upstream:
    #!/usr/bin/env bash
    set -euo pipefail
    echo "🔄 Syncing with upstream Kong repository..."
    
    # Ensure we're in the right directory
    cd "$(git rev-parse --show-toplevel)"
    
    # Add upstream remote if it doesn't exist
    if ! git remote get-url upstream >/dev/null 2>&1; then
        echo "➕ Adding upstream remote..."
        git remote add upstream https://github.com/Kong/developer.konghq.com.git
    fi
    
    # Fetch latest upstream changes
    echo "📥 Fetching upstream changes..."
    git fetch upstream
    
    # Check current branch
    CURRENT_BRANCH=$(git branch --show-current)
    if [ "$CURRENT_BRANCH" != "main" ]; then
        echo "⚠️  Warning: Not on main branch (currently on $CURRENT_BRANCH)"
        echo "   Switch to main branch first: git checkout main"
        exit 1
    fi
    
    # Get commit hashes for comparison
    BEFORE_SYNC=$(git rev-parse HEAD)
    UPSTREAM_HEAD=$(git rev-parse upstream/main)
    
    # Check if we're already up to date
    if [ "$BEFORE_SYNC" = "$UPSTREAM_HEAD" ]; then
        echo "✅ Already up to date with upstream"
        exit 0
    fi
    
    # Show what will be merged
    echo "📋 Changes from upstream:"
    git log --oneline --graph HEAD..upstream/main | head -10
    
    # Attempt merge
    echo "🔀 Merging upstream changes..."
    if git merge upstream/main --no-ff --no-edit; then
        AFTER_SYNC=$(git rev-parse HEAD)
        if [ "$BEFORE_SYNC" != "$AFTER_SYNC" ]; then
            echo "✅ Successfully merged upstream changes"
            echo "🚀 Pushing to origin..."
            git push origin main
            echo "✨ Sync complete!"
        else
            echo "ℹ️  No new changes from upstream"
        fi
    else
        echo "❌ Merge conflict detected!"
        echo "   Manual intervention required:"
        echo "   1. Resolve conflicts in your editor"
        echo "   2. Run: git add ."
        echo "   3. Run: git commit"
        echo "   4. Run: git push origin main"
        exit 1
    fi

# Check git status and show upstream comparison
git-status:
    #!/usr/bin/env bash
    echo "📊 Git Status Report"
    echo "==================="
    
    # Show current status
    echo "🌿 Current branch and status:"
    git status --short --branch
    echo
    
    # Check if upstream remote exists
    if git remote get-url upstream >/dev/null 2>&1; then
        git fetch upstream --quiet
        echo "📈 Commits ahead/behind upstream:"
        git rev-list --left-right --count HEAD...upstream/main | \
        awk '{print "   Ahead: " $1 " commits, Behind: " $2 " commits"}'
        echo
        
        echo "📋 Recent upstream commits (last 5):"
        git log --oneline upstream/main -5 --format="   %h %s"
    else
        echo "⚠️  Upstream remote not configured"
        echo "   Run 'just sync-upstream' to add it"
    fi